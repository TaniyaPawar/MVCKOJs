@*productSold*@

@model IEnumerable<MVCKO.Models.KOProductSold>

@{
    ViewBag.Title = "Product Sold Index";
}

<h2>Product Sold Index</h2>

<p>
    <a href="javascript:void(0);" data-bind="click: createProductSold"
       class="btn-create btn btn-primary">Add ProductSold</a>
</p>

<table class="table table-responsive table-hover table-striped table-bordered">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.ID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DateSold)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ProductId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ProductName)
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.CustomerName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StoreName)
        </th>*@
        <th>Actions</th>
    </tr>

    @*//org code*@
    <tbody data-bind="foreach: productSolds">
        <tr>
            <td data-bind="text: ID"></td>
            <td data-bind="text: DateSold"></td>
            <td data-bind="text: ProductId"></td>
            <td data-bind="text: ProductName"></td>
            @*<td data-bind="text: CustomerName"></td>
            <td data-bind="text: StoreName"></td>*@

            <td>
                <a href="javascript:void(0);" data-bind="click: $parent.viewProductSold"
                   class="btn-details btn btn-default">Details</a>
                <a href="javascript:void(0);" data-bind="click: $parent.editProductSold"
                   class="btn-edit btn btn-default">Edit</a>
                <a href="javascript:void(0);" data-bind="click: $parent.deleteProductSold"
                   class="btn-delete btn btn-default">Delete</a>
            </td>
        </tr>
    </tbody>
</table>

<!-- Modal fOR CRUD operations-->
<div id="my-modal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-body" id="my-modal-content">
                <!-- Modal content goes here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" id="clsBtn">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- End CRUD Modal-->

@section scripts
{
    <script src="~/Scripts/moment.js"></script>
    <script src="~/Scripts/moment.min.js"></script>

    <script type="text/javascript">
        function ProductSold(data) {
            //these are the objects which support the property or method from controller
            var self = this;
            self.ID = ko.observable();
            self.DateSold = ko.observable().extend({ date: true });
            self.ProductId = ko.observable();

            //subscribers to update data's name when dropdown list values are selected
            self.ProductId.subscribe(function (newValue) {
                if (newValue) {
                    try {
                        var elem = document.querySelector("#ProductId option[value='" + self.ProductId() + "']");
                        if (elem)
                            self.ProductName(elem.text);
                    }
                    catch (e) {
                        //do nothing
                    }
                };
            });
            self.ProductName = ko.observable();

            if (data) {
                self.ID(data.ID);
                self.DateSold(moment(data.DateSold).format("DD/MM/YYYY"));
                self.ProductId(data.ProductId);
                self.ProductName(data.ProductName);
                //self.CustomerId(data.CustomerId);
                //self.StoreId(data.StoreId);
                //self.CustomerName(data.CustomerName);
                //self.StoreName(data.StoreName);
            }
        }

        function ProductSoldViewModel() {
            var self = this;
            var modalOptions = { "backdrop": "static", keyboard: true };
            self.productSolds = ko.observableArray();
            self.newProductSold = new ProductSold();
            self.selectedProductSold = new ProductSold();

            //Response to 'createProductSold' click
            self.createProductSold = function () {
                self.newProductSold = new ProductSold();
                self.newProductSold.errors = ko.validation.group(self.newProductSold);
                //get the 'Create' view from server
                $.ajax({
                    type: "GET",
                    url: "/ProductSold/Create",
                    datatype: "html",
                    success: function (data) {
                        //Insert the partial view HTML into the bootstrap modal
                        $('#my-modal-content').html(data);
                        $('my-modal').modal(modalOptions);
                        //Apply binding to the newly inserted html section
                        ko.applyBindings(self, document.getElementById('create-productSold-form'));
                        $('#my-modal').modal('show');
                    }
                });
            };

            //Response to 'Create' button in the Create view
            self.createConfirmed = function () {
                if (self.newProductSold.errors().length === 0) {
                    $.ajax({
                        type: "POST",
                        url: "/ProductSold/Create",
                        data: $('#create-productSold-form').serialize(),
                        datatype: "json",
                        success: function (data) {
                            if (data > 0) {
                                //Get the new ID
                                self.newProductSold.ID(data);
                                //Add the new sale into 'sales' array
                                self.productSolds.push(self.newProductSold);
                                $('#my-modal').modal('hide');
                            }
                            else {
                                alert("An error occured, please try again!");
                                $('#my-modal').modal('hide');
                            }
                        }
                    });
                }
                else {
                    alert("Error! Please check your submission");
                }
            };

            //"Details" button's action
            self.viewProductSold = function (data) {
                self.selectedProductSold = data;
                //Get the Details view from server
                $.ajax({
                    type: "GET",
                    url: "/ProductSold/Details",
                    datatype: "html",
                    success: function (data) {
                        //Insert the partial view html into the bootstrap modal
                        $('#my-modal-content').html(data);
                        $('#my-modal').modal(modalOptions);
                        //Apply binding to the newly inserted html section
                        ko.applyBindings(self, document.getElementById('productSold-details'));
                        $('#my-modal').modal('show');
                    }
                });
            };

            // "Edit" button's action.
            self.editProductSold = function (data) {
                self.selectedProductSold = data;
                self.newProductSold = new ProductSold(ko.toJS(data));
                self.newProductSold.errors = ko.validation.group(self.newProductSold);
                // Get the "Edit" view from the server.
                $.ajax({
                    type: "GET",
                    url: "/ProductSold/Edit",
                    datatype: "html",
                    success: function (data) {
                        // Insert the partial view HTML into the bootstrap modal.
                        $('#my-modal-content').html(data);
                        $('#my-modal').modal(modalOptions);
                        // Apply binding to the newly inserted html section.
                        ko.applyBindings(self, document.getElementById('edit-productSold-form'));
                        $('#my-modal').modal('show');
                    }
                });
            };

            // Edit confirmed action.
            self.editConfirmed = function () {
                if (self.newProductSold.errors().length === 0) {
                    // Save new data to the database.
                    $.ajax({
                        type: "POST",
                        url: "/ProductSold/Edit",
                        data: $('#edit-productSold-form').serialize(),
                        success: function (data) {
                            // Update viewModel array.
                            self.productSolds.replace(self.selectedProductSold, self.newProductSold);
                            $('#my-modal').modal('hide');
                        },
                        error: function (e) {
                            alert(e);
                        }
                    });
                } else {
                    alert("Error! Please check your submission.");

                }
            };

            // "Delete" button's action.
            self.deleteProductSold = function (data) {
                self.selectedProductSold = data;
                // Call the Delete action to get the partial view HTML document.
                $.ajax({
                    type: "GET",
                    url: "/ProductSold/Delete",
                    datatype: "html",
                    success: function (data) {
                        // Insert the partial view HTML into the bootstrap modal.
                        $('#my-modal-content').html(data);
                        $('#my-modal').modal(modalOptions);
                        // Apply binding to the newly inserted html section.
                        ko.applyBindings(self, document.getElementById('delete-productSold'));
                        $('#my-modal').modal('show');
                    }
                });
            };

            // Delete confirmed action.
            self.deleteConfirmed = function () {
                $.ajax({
                    type: "POST",
                    url: "/ProductSold/Delete",
                    data: $('#delete-productSold-form').serialize(),
                    datatype: "html",
                    success: function (data) {
                        // Remove the selected customer from the observable array.
                        self.productSolds.remove(self.selectedProductSold);
                        $('#my-modal').modal('hide');
                    },
                    error: function (e) {
                        if (e.status == 500) // Foreign key violation.
                            alert("This customer has associated Sale entries. Delete failed!");
                        else
                            alert("Error! Delete failed!");
                    }
                });
            };
        }

        $("documet").ready(function () {
            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                errorClass: 'errorStyle',
                messageTemplate: null
            }, true);
            var viewModel = new ProductSoldViewModel();
            //Get all data from the server and bind it to the view model.
            $.get('/ProductSold/GetProductSolds', function (data) {
                var productSold;
                $.each(data, function (i, item) {
                    productSold = new ProductSold(item);
                    viewModel.productSolds.push(productSold);
                })
            });
            ko.validation.registerExtenders();
            ko.applyBindings(viewModel);
        });
    </script>
}